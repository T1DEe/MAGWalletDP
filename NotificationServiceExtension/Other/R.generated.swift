//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localization` struct is generated, and contains static references to 2 localization keys.
    struct localization {
      /// Value: Incoming transaction
      static let notificationTransactionIncomingTitle = Rswift.StringResource(key: "notification.transaction.incoming.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Outgoing transaction
      static let notificationTransactionOutgoingTitle = Rswift.StringResource(key: "notification.transaction.outgoing.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Incoming transaction
      static func notificationTransactionIncomingTitle(_: Void = ()) -> String {
        return NSLocalizedString("notification.transaction.incoming.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Outgoing transaction
      static func notificationTransactionOutgoingTitle(_: Void = ()) -> String {
        return NSLocalizedString("notification.transaction.outgoing.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
