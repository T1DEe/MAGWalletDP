//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    /// Color `blue`.
    static let blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue")
    /// Color `dark`.
    static let dark = Rswift.ColorResource(bundle: R.hostingBundle, name: "dark")
    /// Color `gray1`.
    static let gray1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray1")
    /// Color `gray2`.
    static let gray2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray2")
    /// Color `light`.
    static let light = Rswift.ColorResource(bundle: R.hostingBundle, name: "light")
    /// Color `pink`.
    static let pink = Rswift.ColorResource(bundle: R.hostingBundle, name: "pink")
    /// Color `purple`.
    static let purple = Rswift.ColorResource(bundle: R.hostingBundle, name: "purple")
    /// Color `turquoise`.
    static let turquoise = Rswift.ColorResource(bundle: R.hostingBundle, name: "turquoise")
    /// Color `yellow`.
    static let yellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "yellow")
    
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "dark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dark, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "gray1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray1, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "gray2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray2, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.light, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "pink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pink, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "purple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.purple, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "turquoise", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func turquoise(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.turquoise, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Poppins-Medium`.
    static let poppinsMedium = Rswift.FontResource(fontName: "Poppins-Medium")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")
    /// Font `Poppins-SemiBold`.
    static let poppinsSemiBold = Rswift.FontResource(fontName: "Poppins-SemiBold")
    
    /// `UIFont(name: "Poppins-Medium", size: ...)`
    static func poppinsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMedium, size: size)
    }
    
    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }
    
    /// `UIFont(name: "Poppins-SemiBold", size: ...)`
    static func poppinsSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBold, size: size)
    }
    
    static func validate() throws {
      if R.font.poppinsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Medium' could not be loaded, is 'Poppins-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBold' could not be loaded, is 'Poppins-SemiBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 25 images.
  struct image {
    /// Image `accounts`.
    static let accounts = Rswift.ImageResource(bundle: R.hostingBundle, name: "accounts")
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `autoblock_full`.
    static let autoblock_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "autoblock_full")
    /// Image `autoblock`.
    static let autoblock = Rswift.ImageResource(bundle: R.hostingBundle, name: "autoblock")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `backup`.
    static let backup = Rswift.ImageResource(bundle: R.hostingBundle, name: "backup")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `cell_arrow`.
    static let cell_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "cell_arrow")
    /// Image `changeNetwork`.
    static let changeNetwork = Rswift.ImageResource(bundle: R.hostingBundle, name: "changeNetwork")
    /// Image `change_pin`.
    static let change_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "change_pin")
    /// Image `faceIdIcon`.
    static let faceIdIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "faceIdIcon")
    /// Image `icAugur`.
    static let icAugur = Rswift.ImageResource(bundle: R.hostingBundle, name: "icAugur")
    /// Image `icBitcoin`.
    static let icBitcoin = Rswift.ImageResource(bundle: R.hostingBundle, name: "icBitcoin")
    /// Image `icEthereum`.
    static let icEthereum = Rswift.ImageResource(bundle: R.hostingBundle, name: "icEthereum")
    /// Image `icSettings`.
    static let icSettings = Rswift.ImageResource(bundle: R.hostingBundle, name: "icSettings")
    /// Image `icValCoin`.
    static let icValCoin = Rswift.ImageResource(bundle: R.hostingBundle, name: "icValCoin")
    /// Image `ic`.
    static let ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic")
    /// Image `logout_screen`.
    static let logout_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout_screen")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `pin_empty`.
    static let pin_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin_empty")
    /// Image `pin_full`.
    static let pin_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin_full")
    /// Image `refresh_icon`.
    static let refresh_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_icon")
    /// Image `selected_time`.
    static let selected_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected_time")
    /// Image `touchIdIcon`.
    static let touchIdIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "touchIdIcon")
    /// Image `trash_icon`.
    static let trash_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash_icon")
    
    /// `UIImage(named: "accounts", bundle: ..., traitCollection: ...)`
    static func accounts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accounts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "autoblock", bundle: ..., traitCollection: ...)`
    static func autoblock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.autoblock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "autoblock_full", bundle: ..., traitCollection: ...)`
    static func autoblock_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.autoblock_full, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backup", bundle: ..., traitCollection: ...)`
    static func backup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cell_arrow", bundle: ..., traitCollection: ...)`
    static func cell_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cell_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "changeNetwork", bundle: ..., traitCollection: ...)`
    static func changeNetwork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changeNetwork, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "change_pin", bundle: ..., traitCollection: ...)`
    static func change_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.change_pin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "faceIdIcon", bundle: ..., traitCollection: ...)`
    static func faceIdIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faceIdIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic", bundle: ..., traitCollection: ...)`
    static func ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icAugur", bundle: ..., traitCollection: ...)`
    static func icAugur(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icAugur, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icBitcoin", bundle: ..., traitCollection: ...)`
    static func icBitcoin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBitcoin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icEthereum", bundle: ..., traitCollection: ...)`
    static func icEthereum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icEthereum, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icSettings", bundle: ..., traitCollection: ...)`
    static func icSettings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icSettings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icValCoin", bundle: ..., traitCollection: ...)`
    static func icValCoin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icValCoin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logout_screen", bundle: ..., traitCollection: ...)`
    static func logout_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pin_empty", bundle: ..., traitCollection: ...)`
    static func pin_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin_empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pin_full", bundle: ..., traitCollection: ...)`
    static func pin_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin_full, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "refresh_icon", bundle: ..., traitCollection: ...)`
    static func refresh_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selected_time", bundle: ..., traitCollection: ...)`
    static func selected_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected_time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touchIdIcon", bundle: ..., traitCollection: ...)`
    static func touchIdIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touchIdIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trash_icon", bundle: ..., traitCollection: ...)`
    static func trash_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash_icon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `AllCurrenciesDuoTableViewCell`.
    static let allCurrenciesDuoTableViewCell = _R.nib._AllCurrenciesDuoTableViewCell()
    /// Nib `AllCurrenciesEmptyTableViewCell`.
    static let allCurrenciesEmptyTableViewCell = _R.nib._AllCurrenciesEmptyTableViewCell()
    /// Nib `AllCurrenciesSingleTableViewCell`.
    static let allCurrenciesSingleTableViewCell = _R.nib._AllCurrenciesSingleTableViewCell()
    /// Nib `PasswordFillView`.
    static let passwordFillView = _R.nib._PasswordFillView()
    /// Nib `PasswordFillingCollectionCell`.
    static let passwordFillingCollectionCell = _R.nib._PasswordFillingCollectionCell()
    /// Nib `PasswordKeyboardCell`.
    static let passwordKeyboardCell = _R.nib._PasswordKeyboardCell()
    /// Nib `PasswordKeyboardView`.
    static let passwordKeyboardView = _R.nib._PasswordKeyboardView()
    
    /// `UINib(name: "AllCurrenciesDuoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.allCurrenciesDuoTableViewCell) instead")
    static func allCurrenciesDuoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.allCurrenciesDuoTableViewCell)
    }
    
    /// `UINib(name: "AllCurrenciesEmptyTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.allCurrenciesEmptyTableViewCell) instead")
    static func allCurrenciesEmptyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.allCurrenciesEmptyTableViewCell)
    }
    
    /// `UINib(name: "AllCurrenciesSingleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.allCurrenciesSingleTableViewCell) instead")
    static func allCurrenciesSingleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.allCurrenciesSingleTableViewCell)
    }
    
    /// `UINib(name: "PasswordFillView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.passwordFillView) instead")
    static func passwordFillView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordFillView)
    }
    
    /// `UINib(name: "PasswordFillingCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.passwordFillingCollectionCell) instead")
    static func passwordFillingCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordFillingCollectionCell)
    }
    
    /// `UINib(name: "PasswordKeyboardCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.passwordKeyboardCell) instead")
    static func passwordKeyboardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordKeyboardCell)
    }
    
    /// `UINib(name: "PasswordKeyboardView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.passwordKeyboardView) instead")
    static func passwordKeyboardView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordKeyboardView)
    }
    
    static func allCurrenciesDuoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllCurrenciesDuoTableViewCell? {
      return R.nib.allCurrenciesDuoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllCurrenciesDuoTableViewCell
    }
    
    static func allCurrenciesEmptyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllCurrenciesEmptyTableViewCell? {
      return R.nib.allCurrenciesEmptyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllCurrenciesEmptyTableViewCell
    }
    
    static func allCurrenciesSingleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllCurrenciesSingleTableViewCell? {
      return R.nib.allCurrenciesSingleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllCurrenciesSingleTableViewCell
    }
    
    static func passwordFillView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PasswordFillView? {
      return R.nib.passwordFillView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasswordFillView
    }
    
    static func passwordFillingCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PasswordFillingCollectionCell? {
      return R.nib.passwordFillingCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasswordFillingCollectionCell
    }
    
    static func passwordKeyboardCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PasswordKeyboardCell? {
      return R.nib.passwordKeyboardCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasswordKeyboardCell
    }
    
    static func passwordKeyboardView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PasswordKeyboardView? {
      return R.nib.passwordKeyboardView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasswordKeyboardView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AccountsCellIdentifier`.
    static let accountsCellIdentifier: Rswift.ReuseIdentifier<AccountsCell> = Rswift.ReuseIdentifier(identifier: "AccountsCellIdentifier")
    /// Reuse identifier `AddAccountHeaderCellIdentifier`.
    static let addAccountHeaderCellIdentifier: Rswift.ReuseIdentifier<AddAccountHeaderCell> = Rswift.ReuseIdentifier(identifier: "AddAccountHeaderCellIdentifier")
    /// Reuse identifier `AllCurrenciesDuoTableViewCell`.
    static let allCurrenciesDuoTableViewCell: Rswift.ReuseIdentifier<AllCurrenciesDuoTableViewCell> = Rswift.ReuseIdentifier(identifier: "AllCurrenciesDuoTableViewCell")
    /// Reuse identifier `AllCurrenciesEmptyTableViewCell`.
    static let allCurrenciesEmptyTableViewCell: Rswift.ReuseIdentifier<AllCurrenciesEmptyTableViewCell> = Rswift.ReuseIdentifier(identifier: "AllCurrenciesEmptyTableViewCell")
    /// Reuse identifier `AllCurrenciesSingleTableViewCell`.
    static let allCurrenciesSingleTableViewCell: Rswift.ReuseIdentifier<AllCurrenciesSingleTableViewCell> = Rswift.ReuseIdentifier(identifier: "AllCurrenciesSingleTableViewCell")
    /// Reuse identifier `AutoblockTableViewCell`.
    static let autoblockTableViewCell: Rswift.ReuseIdentifier<AutoblockTableViewCell> = Rswift.ReuseIdentifier(identifier: "AutoblockTableViewCell")
    /// Reuse identifier `ChangeNetworkHeaderCellIdentifier`.
    static let changeNetworkHeaderCellIdentifier: Rswift.ReuseIdentifier<ChangeNetworkHeaderCell> = Rswift.ReuseIdentifier(identifier: "ChangeNetworkHeaderCellIdentifier")
    /// Reuse identifier `ChangeNetworkTableViewCell`.
    static let changeNetworkTableViewCell: Rswift.ReuseIdentifier<ChangeNetworkTableViewCell> = Rswift.ReuseIdentifier(identifier: "ChangeNetworkTableViewCell")
    /// Reuse identifier `PasswordFillingCollectionCellIdentifire`.
    static let passwordFillingCollectionCellIdentifire: Rswift.ReuseIdentifier<PasswordFillingCollectionCell> = Rswift.ReuseIdentifier(identifier: "PasswordFillingCollectionCellIdentifire")
    /// Reuse identifier `PasswordKeyboardCellIdentifire`.
    static let passwordKeyboardCellIdentifire: Rswift.ReuseIdentifier<PasswordKeyboardCell> = Rswift.ReuseIdentifier(identifier: "PasswordKeyboardCellIdentifire")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `AllCurrencies`.
    static let allCurrencies = _R.storyboard.allCurrencies()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainRouting`.
    static let mainRouting = _R.storyboard.mainRouting()
    /// Storyboard `OneButtonSnackbar`.
    static let oneButtonSnackbar = _R.storyboard.oneButtonSnackbar()
    /// Storyboard `Pin`.
    static let pin = _R.storyboard.pin()
    /// Storyboard `Root`.
    static let root = _R.storyboard.root()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `SnackBar`.
    static let snackBar = _R.storyboard.snackBar()
    /// Storyboard `SnackBarsRoot`.
    static let snackBarsRoot = _R.storyboard.snackBarsRoot()
    /// Storyboard `Splash`.
    static let splash = _R.storyboard.splash()
    
    /// `UIStoryboard(name: "AllCurrencies", bundle: ...)`
    static func allCurrencies(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.allCurrencies)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MainRouting", bundle: ...)`
    static func mainRouting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainRouting)
    }
    
    /// `UIStoryboard(name: "OneButtonSnackbar", bundle: ...)`
    static func oneButtonSnackbar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.oneButtonSnackbar)
    }
    
    /// `UIStoryboard(name: "Pin", bundle: ...)`
    static func pin(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pin)
    }
    
    /// `UIStoryboard(name: "Root", bundle: ...)`
    static func root(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.root)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "SnackBar", bundle: ...)`
    static func snackBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.snackBar)
    }
    
    /// `UIStoryboard(name: "SnackBarsRoot", bundle: ...)`
    static func snackBarsRoot(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.snackBarsRoot)
    }
    
    /// `UIStoryboard(name: "Splash", bundle: ...)`
    static func splash(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splash)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localization` struct is generated, and contains static references to 81 localization keys.
    struct localization {
      /// Value: %@ minute
      static let blockTimeMinute = Rswift.StringResource(key: "blockTime.minute", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ minutes
      static let blockTimeMinutes = Rswift.StringResource(key: "blockTime.minutes", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ seconds
      static let blockTimeSeconds = Rswift.StringResource(key: "blockTime.seconds", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 0
      static let passwordKeyboardZeroNumber = Rswift.StringResource(key: "password.keyboard.zero.number", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 1
      static let passwordKeyboardOneNumber = Rswift.StringResource(key: "password.keyboard.one.number", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 2
      static let passwordKeyboardTwoNumber = Rswift.StringResource(key: "password.keyboard.two.number", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 3
      static let passwordKeyboardThreeNumber = Rswift.StringResource(key: "password.keyboard.three.number", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 4
      static let passwordKeyboardFourNumber = Rswift.StringResource(key: "password.keyboard.four.number", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 5
      static let passwordKeyboardFiveNumber = Rswift.StringResource(key: "password.keyboard.five.number", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 6
      static let passwordKeyboardSixNumber = Rswift.StringResource(key: "password.keyboard.six.number", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 7
      static let passwordKeyboardSevenNumber = Rswift.StringResource(key: "password.keyboard.seven.number", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 8
      static let passwordKeyboardEightNumber = Rswift.StringResource(key: "password.keyboard.eight.number", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 9
      static let passwordKeyboardNineNumber = Rswift.StringResource(key: "password.keyboard.nine.number", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Accounts
      static let settingsFlowMultiaccountsScreenTitle = Rswift.StringResource(key: "settings.flow.multiaccounts.screen.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add account
      static let allCurrenciesAddAccount = Rswift.StringResource(key: "all.currencies.add.account", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure to delete account?
      static let accountsScreenDeleteSnackbarTitle = Rswift.StringResource(key: "accounts.screen.delete.snackbar.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure to switch account?
      static let accountsScreenSwitchSnackbarTitle = Rswift.StringResource(key: "accounts.screen.switch.snackbar.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Autoblock
      static let settingsFlowAutoblock = Rswift.StringResource(key: "settings.flow.autoblock", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back
      static let createPinBack = Rswift.StringResource(key: "create.pin.back", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back
      static let pinVerificationBack = Rswift.StringResource(key: "pin.verification.back", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Before you can chenge PIN you need to enter your current PIN
      static let changePinOldSubtitle = Rswift.StringResource(key: "change.pin.old.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Can't delete account
      static let accountsScreenDeleteErrorMessage = Rswift.StringResource(key: "accounts.screen.delete.error.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Can't select account
      static let accountsScreenSwitchErrorMessage = Rswift.StringResource(key: "accounts.screen.switch.error.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let accountsScreenDeleteSnackbarLeftButton = Rswift.StringResource(key: "accounts.screen.delete.snackbar.left.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let accountsScreenSwitchSnackbarLeftButton = Rswift.StringResource(key: "accounts.screen.switch.snackbar.left.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let createPinCancel = Rswift.StringResource(key: "create.pin.cancel", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let pinVerificationCancel = Rswift.StringResource(key: "pin.verification.cancel", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let settingsFlowLogoutScreenCancelButton = Rswift.StringResource(key: "settings.flow.logout.screen.cancel.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let settingsFlowNotificationsPermissionCancel = Rswift.StringResource(key: "settings.flow.notifications.permission.cancel", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change Network
      static let settingsFlowChangeNetwork = Rswift.StringResource(key: "settings.flow.changeNetwork", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change PIN
      static let settingsFlowChangePin = Rswift.StringResource(key: "settings.flow.change.pin", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Clear
      static let pinForgotClearButton = Rswift.StringResource(key: "pin.forgot.clear.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm
      static let settingsFlowLogoutScreenConfirmButton = Rswift.StringResource(key: "settings.flow.logout.screen.confirm.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm PIN
      static let changePinNewRepeateTitle = Rswift.StringResource(key: "change.pin.new.repeate.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm PIN
      static let createPinConfirm = Rswift.StringResource(key: "create.pin.confirm", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete
      static let buttonDelete = Rswift.StringResource(key: "button.delete", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Don't block
      static let blockTimeNoBlock = Rswift.StringResource(key: "blockTime.no.block", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your PIN
      static let pinVerificationSubtitle = Rswift.StringResource(key: "pin.verification.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error handled
      static let accountsScreenSwitchOrDeleteErrorTitle = Rswift.StringResource(key: "accounts.screen.switch.or.delete.error.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Face ID
      static let settingsFlowFaceId = Rswift.StringResource(key: "settings.flow.face.id", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: I understand that wallet does not store backups of my account keys, and I will lose access to them by clearing my account data.
      static let pinForgotCheckboxText = Rswift.StringResource(key: "pin.forgot.checkbox.text", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: If you do, you will lose access to the accounts you've logged into. You will need to log into them again.
      static let pinForgotSecondSubtitle = Rswift.StringResource(key: "pin.forgot.second.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Loading... Please wait...
      static let splashScreenSubtitle = Rswift.StringResource(key: "splash.screen.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Logout
      static let settingsFlowLogout = Rswift.StringResource(key: "settings.flow.logout", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Manage your secure cryptocurrency multi wallet
      static let allCurrenciesSubtitle = Rswift.StringResource(key: "all.currencies.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My wallets
      static let allCurrenciesTitle = Rswift.StringResource(key: "all.currencies.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Networks
      static let settingsFlowChangeNetworkScreenTitle = Rswift.StringResource(key: "settings.flow.changeNetwork.screen.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No account available
      static let allCurrenciesNoAccount = Rswift.StringResource(key: "all.currencies.no.account", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notifications disabled
      static let settingsFlowNotificationsPermissionTitle = Rswift.StringResource(key: "settings.flow.notifications.permission.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let buttonOk = Rswift.StringResource(key: "button.ok", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let settingsFlowNotificationsInternetButton = Rswift.StringResource(key: "settings.flow.notifications.internet.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open
      static let settingsFlowNotificationsPermissionOpen = Rswift.StringResource(key: "settings.flow.notifications.permission.open", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open settings to enable notifications
      static let settingsFlowNotificationsPermissionMessage = Rswift.StringResource(key: "settings.flow.notifications.permission.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PIN
      static let settingsFlowLogoutScreenInfoTitle2 = Rswift.StringResource(key: "settings.flow.logout.screen.info.title.2", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PIN does't match
      static let createPinErrorMatch = Rswift.StringResource(key: "create.pin.error.match", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PIN will be used to access your wallet.
      static let changePinNewRepeateSubtitle = Rswift.StringResource(key: "change.pin.new.repeate.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PIN will be used to access your wallet.
      static let changePinNewSubtitle = Rswift.StringResource(key: "change.pin.new.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PIN will be used to access your wallet.
      static let createPinInfoText = Rswift.StringResource(key: "create.pin.info.text", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PIN will be used to access your wallet.
      static let createPinSubtitle = Rswift.StringResource(key: "create.pin.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please choose autoblock period
      static let settingsFlowAutoblockScreenInfoTitle = Rswift.StringResource(key: "settings.flow.autoblock.screen.info.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please, enable internet connection
      static let settingsFlowNotificationsInternetTitle = Rswift.StringResource(key: "settings.flow.notifications.internet.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Push Notifications
      static let settingsFlowNotifications = Rswift.StringResource(key: "settings.flow.notifications", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set PIN
      static let changePinNewTitle = Rswift.StringResource(key: "change.pin.new.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set PIN
      static let createPinCreate = Rswift.StringResource(key: "create.pin.create", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settingsFlowTitle = Rswift.StringResource(key: "settings.flow.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Switch
      static let accountsScreenSwitchSnackbarRightButton = Rswift.StringResource(key: "accounts.screen.switch.snackbar.right.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This process cannot be undone.
      static let accountsScreenDeleteSnackbarMessage = Rswift.StringResource(key: "accounts.screen.delete.snackbar.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This process cannot be undone.
      static let accountsScreenSwitchSnackbarMessage = Rswift.StringResource(key: "accounts.screen.switch.snackbar.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Touch ID
      static let settingsFlowTouchId = Rswift.StringResource(key: "settings.flow.touch.id", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unlock Wallet
      static let changePinOldTitle = Rswift.StringResource(key: "change.pin.old.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unlock Wallet
      static let pinVerificationTitle = Rswift.StringResource(key: "pin.verification.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We strongly recommend to backup your WIF key.
      static let settingsFlowLogoutScreenInfoTitle = Rswift.StringResource(key: "settings.flow.logout.screen.info.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome
      static let splashScreenTitle = Rswift.StringResource(key: "splash.screen.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes, delete
      static let accountsScreenDeleteSnackbarRightButton = Rswift.StringResource(key: "accounts.screen.delete.snackbar.right.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can clear wallet and set new PIN. But you will need to import private keys.
      static let settingsFlowLogoutScreenInfoSubtitle = Rswift.StringResource(key: "settings.flow.logout.screen.info.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can clear your data from application and set a new PIN.
      static let pinForgotFirstSubtitle = Rswift.StringResource(key: "pin.forgot.first.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your
      static let settingsFlowLogoutScreenInfoTitle1 = Rswift.StringResource(key: "settings.flow.logout.screen.info.title.1", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your PIN can not be restored
      static let pinForgotTitle = Rswift.StringResource(key: "pin.forgot.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: back
      static let buttonBack = Rswift.StringResource(key: "button.back", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: can't be restored.
      static let settingsFlowLogoutScreenInfoTitle3 = Rswift.StringResource(key: "settings.flow.logout.screen.info.title.3", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: forgot pin?
      static let pinVerificationForgotPin = Rswift.StringResource(key: "pin.verification.forgot.pin", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: %@ minute
      static func blockTimeMinute(_ value1: String) -> String {
        return String(format: NSLocalizedString("blockTime.minute", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ minutes
      static func blockTimeMinutes(_ value1: String) -> String {
        return String(format: NSLocalizedString("blockTime.minutes", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ seconds
      static func blockTimeSeconds(_ value1: String) -> String {
        return String(format: NSLocalizedString("blockTime.seconds", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 0
      static func passwordKeyboardZeroNumber(_: Void = ()) -> String {
        return NSLocalizedString("password.keyboard.zero.number", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 1
      static func passwordKeyboardOneNumber(_: Void = ()) -> String {
        return NSLocalizedString("password.keyboard.one.number", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 2
      static func passwordKeyboardTwoNumber(_: Void = ()) -> String {
        return NSLocalizedString("password.keyboard.two.number", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 3
      static func passwordKeyboardThreeNumber(_: Void = ()) -> String {
        return NSLocalizedString("password.keyboard.three.number", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 4
      static func passwordKeyboardFourNumber(_: Void = ()) -> String {
        return NSLocalizedString("password.keyboard.four.number", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 5
      static func passwordKeyboardFiveNumber(_: Void = ()) -> String {
        return NSLocalizedString("password.keyboard.five.number", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 6
      static func passwordKeyboardSixNumber(_: Void = ()) -> String {
        return NSLocalizedString("password.keyboard.six.number", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 7
      static func passwordKeyboardSevenNumber(_: Void = ()) -> String {
        return NSLocalizedString("password.keyboard.seven.number", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 8
      static func passwordKeyboardEightNumber(_: Void = ()) -> String {
        return NSLocalizedString("password.keyboard.eight.number", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 9
      static func passwordKeyboardNineNumber(_: Void = ()) -> String {
        return NSLocalizedString("password.keyboard.nine.number", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Accounts
      static func settingsFlowMultiaccountsScreenTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.multiaccounts.screen.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Add account
      static func allCurrenciesAddAccount(_: Void = ()) -> String {
        return NSLocalizedString("all.currencies.add.account", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure to delete account?
      static func accountsScreenDeleteSnackbarTitle(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.delete.snackbar.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure to switch account?
      static func accountsScreenSwitchSnackbarTitle(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.snackbar.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Autoblock
      static func settingsFlowAutoblock(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.autoblock", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Back
      static func createPinBack(_: Void = ()) -> String {
        return NSLocalizedString("create.pin.back", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Back
      static func pinVerificationBack(_: Void = ()) -> String {
        return NSLocalizedString("pin.verification.back", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Before you can chenge PIN you need to enter your current PIN
      static func changePinOldSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("change.pin.old.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Can't delete account
      static func accountsScreenDeleteErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.delete.error.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Can't select account
      static func accountsScreenSwitchErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.error.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func accountsScreenDeleteSnackbarLeftButton(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.delete.snackbar.left.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func accountsScreenSwitchSnackbarLeftButton(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.snackbar.left.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func createPinCancel(_: Void = ()) -> String {
        return NSLocalizedString("create.pin.cancel", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func pinVerificationCancel(_: Void = ()) -> String {
        return NSLocalizedString("pin.verification.cancel", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func settingsFlowLogoutScreenCancelButton(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.cancel.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func settingsFlowNotificationsPermissionCancel(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.permission.cancel", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Change Network
      static func settingsFlowChangeNetwork(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.changeNetwork", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Change PIN
      static func settingsFlowChangePin(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.change.pin", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Clear
      static func pinForgotClearButton(_: Void = ()) -> String {
        return NSLocalizedString("pin.forgot.clear.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Confirm
      static func settingsFlowLogoutScreenConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.confirm.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Confirm PIN
      static func changePinNewRepeateTitle(_: Void = ()) -> String {
        return NSLocalizedString("change.pin.new.repeate.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Confirm PIN
      static func createPinConfirm(_: Void = ()) -> String {
        return NSLocalizedString("create.pin.confirm", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Delete
      static func buttonDelete(_: Void = ()) -> String {
        return NSLocalizedString("button.delete", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Don't block
      static func blockTimeNoBlock(_: Void = ()) -> String {
        return NSLocalizedString("blockTime.no.block", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter your PIN
      static func pinVerificationSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("pin.verification.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Error handled
      static func accountsScreenSwitchOrDeleteErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.or.delete.error.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Face ID
      static func settingsFlowFaceId(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.face.id", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: I understand that wallet does not store backups of my account keys, and I will lose access to them by clearing my account data.
      static func pinForgotCheckboxText(_: Void = ()) -> String {
        return NSLocalizedString("pin.forgot.checkbox.text", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: If you do, you will lose access to the accounts you've logged into. You will need to log into them again.
      static func pinForgotSecondSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("pin.forgot.second.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Loading... Please wait...
      static func splashScreenSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("splash.screen.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Logout
      static func settingsFlowLogout(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Manage your secure cryptocurrency multi wallet
      static func allCurrenciesSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("all.currencies.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My wallets
      static func allCurrenciesTitle(_: Void = ()) -> String {
        return NSLocalizedString("all.currencies.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Networks
      static func settingsFlowChangeNetworkScreenTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.changeNetwork.screen.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No account available
      static func allCurrenciesNoAccount(_: Void = ()) -> String {
        return NSLocalizedString("all.currencies.no.account", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Notifications disabled
      static func settingsFlowNotificationsPermissionTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.permission.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func buttonOk(_: Void = ()) -> String {
        return NSLocalizedString("button.ok", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func settingsFlowNotificationsInternetButton(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.internet.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Open
      static func settingsFlowNotificationsPermissionOpen(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.permission.open", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Open settings to enable notifications
      static func settingsFlowNotificationsPermissionMessage(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.permission.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PIN
      static func settingsFlowLogoutScreenInfoTitle2(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.info.title.2", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PIN does't match
      static func createPinErrorMatch(_: Void = ()) -> String {
        return NSLocalizedString("create.pin.error.match", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PIN will be used to access your wallet.
      static func changePinNewRepeateSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("change.pin.new.repeate.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PIN will be used to access your wallet.
      static func changePinNewSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("change.pin.new.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PIN will be used to access your wallet.
      static func createPinInfoText(_: Void = ()) -> String {
        return NSLocalizedString("create.pin.info.text", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PIN will be used to access your wallet.
      static func createPinSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("create.pin.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please choose autoblock period
      static func settingsFlowAutoblockScreenInfoTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.autoblock.screen.info.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please, enable internet connection
      static func settingsFlowNotificationsInternetTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.internet.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Push Notifications
      static func settingsFlowNotifications(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Set PIN
      static func changePinNewTitle(_: Void = ()) -> String {
        return NSLocalizedString("change.pin.new.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Set PIN
      static func createPinCreate(_: Void = ()) -> String {
        return NSLocalizedString("create.pin.create", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Settings
      static func settingsFlowTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Switch
      static func accountsScreenSwitchSnackbarRightButton(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.snackbar.right.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This process cannot be undone.
      static func accountsScreenDeleteSnackbarMessage(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.delete.snackbar.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This process cannot be undone.
      static func accountsScreenSwitchSnackbarMessage(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.snackbar.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Touch ID
      static func settingsFlowTouchId(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.touch.id", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Unlock Wallet
      static func changePinOldTitle(_: Void = ()) -> String {
        return NSLocalizedString("change.pin.old.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Unlock Wallet
      static func pinVerificationTitle(_: Void = ()) -> String {
        return NSLocalizedString("pin.verification.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: We strongly recommend to backup your WIF key.
      static func settingsFlowLogoutScreenInfoTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.info.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Welcome
      static func splashScreenTitle(_: Void = ()) -> String {
        return NSLocalizedString("splash.screen.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Yes, delete
      static func accountsScreenDeleteSnackbarRightButton(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.delete.snackbar.right.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You can clear wallet and set new PIN. But you will need to import private keys.
      static func settingsFlowLogoutScreenInfoSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.info.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You can clear your data from application and set a new PIN.
      static func pinForgotFirstSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("pin.forgot.first.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your
      static func settingsFlowLogoutScreenInfoTitle1(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.info.title.1", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your PIN can not be restored
      static func pinForgotTitle(_: Void = ()) -> String {
        return NSLocalizedString("pin.forgot.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: back
      static func buttonBack(_: Void = ()) -> String {
        return NSLocalizedString("button.back", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: can't be restored.
      static func settingsFlowLogoutScreenInfoTitle3(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.info.title.3", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: forgot pin?
      static func pinVerificationForgotPin(_: Void = ()) -> String {
        return NSLocalizedString("pin.verification.forgot.pin", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _PasswordFillingCollectionCell.validate()
    }
    
    struct _AllCurrenciesDuoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AllCurrenciesDuoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AllCurrenciesDuoTableViewCell"
      let name = "AllCurrenciesDuoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllCurrenciesDuoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllCurrenciesDuoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AllCurrenciesEmptyTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AllCurrenciesEmptyTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AllCurrenciesEmptyTableViewCell"
      let name = "AllCurrenciesEmptyTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllCurrenciesEmptyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllCurrenciesEmptyTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AllCurrenciesSingleTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AllCurrenciesSingleTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AllCurrenciesSingleTableViewCell"
      let name = "AllCurrenciesSingleTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllCurrenciesSingleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllCurrenciesSingleTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PasswordFillView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PasswordFillView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PasswordFillView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasswordFillView
      }
      
      fileprivate init() {}
    }
    
    struct _PasswordFillingCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PasswordFillingCollectionCell
      
      let bundle = R.hostingBundle
      let identifier = "PasswordFillingCollectionCellIdentifire"
      let name = "PasswordFillingCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PasswordFillingCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasswordFillingCollectionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "pin_empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin_empty' is used in nib 'PasswordFillingCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PasswordKeyboardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PasswordKeyboardCell
      
      let bundle = R.hostingBundle
      let identifier = "PasswordKeyboardCellIdentifire"
      let name = "PasswordKeyboardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PasswordKeyboardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasswordKeyboardCell
      }
      
      fileprivate init() {}
    }
    
    struct _PasswordKeyboardView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PasswordKeyboardView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PasswordKeyboardView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasswordKeyboardView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try allCurrencies.validate()
      try launchScreen.validate()
      try mainRouting.validate()
      try oneButtonSnackbar.validate()
      try pin.validate()
      try root.validate()
      try settings.validate()
      try snackBar.validate()
      try snackBarsRoot.validate()
      try splash.validate()
    }
    
    struct allCurrencies: Rswift.StoryboardResourceType, Rswift.Validatable {
      let allCurrenciesViewController = StoryboardViewControllerResource<AllCurrenciesViewController>(identifier: "AllCurrenciesViewController")
      let bundle = R.hostingBundle
      let name = "AllCurrencies"
      
      func allCurrenciesViewController(_: Void = ()) -> AllCurrenciesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: allCurrenciesViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.allCurrencies().allCurrenciesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'allCurrenciesViewController' could not be loaded from storyboard 'AllCurrencies' as 'AllCurrenciesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "gray2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray2' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct mainRouting: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainRoutingViewController = StoryboardViewControllerResource<MainRoutingViewController>(identifier: "MainRoutingViewController")
      let name = "MainRouting"
      
      func mainRoutingViewController(_: Void = ()) -> MainRoutingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainRoutingViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.mainRouting().mainRoutingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainRoutingViewController' could not be loaded from storyboard 'MainRouting' as 'MainRoutingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct oneButtonSnackbar: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OneButtonSnackbar"
      let oneButtonSnackBarViewController = StoryboardViewControllerResource<OneButtonSnackBarViewController>(identifier: "OneButtonSnackBarViewController")
      
      func oneButtonSnackBarViewController(_: Void = ()) -> OneButtonSnackBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: oneButtonSnackBarViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "errorIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'errorIcon' is used in storyboard 'OneButtonSnackbar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.oneButtonSnackbar().oneButtonSnackBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'oneButtonSnackBarViewController' could not be loaded from storyboard 'OneButtonSnackbar' as 'OneButtonSnackBarViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct pin: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let changePinViewController = StoryboardViewControllerResource<ChangePinViewController>(identifier: "ChangePinViewController")
      let createPinViewController = StoryboardViewControllerResource<CreatePinViewController>(identifier: "CreatePinViewController")
      let forgotPinViewController = StoryboardViewControllerResource<ForgotPinViewController>(identifier: "ForgotPinViewController")
      let name = "Pin"
      let pinVerificationViewController = StoryboardViewControllerResource<PinVerificationViewController>(identifier: "PinVerificationViewController")
      let sessionVerificationViewController = StoryboardViewControllerResource<SessionVerificationViewController>(identifier: "SessionVerificationViewController")
      let unlockPinViewController = StoryboardViewControllerResource<UnlockPinViewController>(identifier: "UnlockPinViewController")
      
      func changePinViewController(_: Void = ()) -> ChangePinViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePinViewController)
      }
      
      func createPinViewController(_: Void = ()) -> CreatePinViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createPinViewController)
      }
      
      func forgotPinViewController(_: Void = ()) -> ForgotPinViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPinViewController)
      }
      
      func pinVerificationViewController(_: Void = ()) -> PinVerificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pinVerificationViewController)
      }
      
      func sessionVerificationViewController(_: Void = ()) -> SessionVerificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sessionVerificationViewController)
      }
      
      func unlockPinViewController(_: Void = ()) -> UnlockPinViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: unlockPinViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "gray2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray2' is used in storyboard 'Pin', but couldn't be loaded.") }
        }
        if _R.storyboard.pin().changePinViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePinViewController' could not be loaded from storyboard 'Pin' as 'ChangePinViewController'.") }
        if _R.storyboard.pin().createPinViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createPinViewController' could not be loaded from storyboard 'Pin' as 'CreatePinViewController'.") }
        if _R.storyboard.pin().forgotPinViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPinViewController' could not be loaded from storyboard 'Pin' as 'ForgotPinViewController'.") }
        if _R.storyboard.pin().pinVerificationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pinVerificationViewController' could not be loaded from storyboard 'Pin' as 'PinVerificationViewController'.") }
        if _R.storyboard.pin().sessionVerificationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sessionVerificationViewController' could not be loaded from storyboard 'Pin' as 'SessionVerificationViewController'.") }
        if _R.storyboard.pin().unlockPinViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'unlockPinViewController' could not be loaded from storyboard 'Pin' as 'UnlockPinViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct root: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RootViewController
      
      let bundle = R.hostingBundle
      let name = "Root"
      let rootViewController = StoryboardViewControllerResource<RootViewController>(identifier: "RootViewController")
      
      func rootViewController(_: Void = ()) -> RootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.root().rootViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootViewController' could not be loaded from storyboard 'Root' as 'RootViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let autoblockViewController = StoryboardViewControllerResource<AutoblockViewController>(identifier: "AutoblockViewController")
      let bundle = R.hostingBundle
      let changeNetworkViewController = StoryboardViewControllerResource<ChangeNetworkViewController>(identifier: "ChangeNetworkViewController")
      let logoutViewController = StoryboardViewControllerResource<LogoutViewController>(identifier: "LogoutViewController")
      let multiAccountsViewController = StoryboardViewControllerResource<MultiAccountsViewController>(identifier: "MultiAccountsViewController")
      let name = "Settings"
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      
      func autoblockViewController(_: Void = ()) -> AutoblockViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: autoblockViewController)
      }
      
      func changeNetworkViewController(_: Void = ()) -> ChangeNetworkViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changeNetworkViewController)
      }
      
      func logoutViewController(_: Void = ()) -> LogoutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: logoutViewController)
      }
      
      func multiAccountsViewController(_: Void = ()) -> MultiAccountsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: multiAccountsViewController)
      }
      
      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "autoblock_full", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'autoblock_full' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logout_screen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logout_screen' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "selected_time", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selected_time' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "trash_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'trash_icon' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray1' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray2' is used in storyboard 'Settings', but couldn't be loaded.") }
        }
        if _R.storyboard.settings().autoblockViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'autoblockViewController' could not be loaded from storyboard 'Settings' as 'AutoblockViewController'.") }
        if _R.storyboard.settings().changeNetworkViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changeNetworkViewController' could not be loaded from storyboard 'Settings' as 'ChangeNetworkViewController'.") }
        if _R.storyboard.settings().logoutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'logoutViewController' could not be loaded from storyboard 'Settings' as 'LogoutViewController'.") }
        if _R.storyboard.settings().multiAccountsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'multiAccountsViewController' could not be loaded from storyboard 'Settings' as 'MultiAccountsViewController'.") }
        if _R.storyboard.settings().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct snackBar: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let buttonSnackBarViewController = StoryboardViewControllerResource<ButtonSnackBarViewController>(identifier: "ButtonSnackBarViewController")
      let name = "SnackBar"
      
      func buttonSnackBarViewController(_: Void = ()) -> ButtonSnackBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: buttonSnackBarViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "errorIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'errorIcon' is used in storyboard 'SnackBar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.snackBar().buttonSnackBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'buttonSnackBarViewController' could not be loaded from storyboard 'SnackBar' as 'ButtonSnackBarViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct snackBarsRoot: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SnackBarsRoot"
      let snackBarRootViewController = StoryboardViewControllerResource<SnackBarRootViewController>(identifier: "SnackBarRootViewController")
      
      func snackBarRootViewController(_: Void = ()) -> SnackBarRootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: snackBarRootViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.snackBarsRoot().snackBarRootViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'snackBarRootViewController' could not be loaded from storyboard 'SnackBarsRoot' as 'SnackBarRootViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct splash: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Splash"
      let splashViewController = StoryboardViewControllerResource<SplashViewController>(identifier: "SplashViewController")
      
      func splashViewController(_: Void = ()) -> SplashViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic' is used in storyboard 'Splash', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "gray2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray2' is used in storyboard 'Splash', but couldn't be loaded.") }
        }
        if _R.storyboard.splash().splashViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashViewController' could not be loaded from storyboard 'Splash' as 'SplashViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
