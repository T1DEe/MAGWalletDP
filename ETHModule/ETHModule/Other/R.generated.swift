//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    /// Color `blue`.
    static let blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue")
    /// Color `dark`.
    static let dark = Rswift.ColorResource(bundle: R.hostingBundle, name: "dark")
    /// Color `gray1`.
    static let gray1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray1")
    /// Color `gray2`.
    static let gray2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray2")
    /// Color `light`.
    static let light = Rswift.ColorResource(bundle: R.hostingBundle, name: "light")
    /// Color `pink`.
    static let pink = Rswift.ColorResource(bundle: R.hostingBundle, name: "pink")
    /// Color `purple`.
    static let purple = Rswift.ColorResource(bundle: R.hostingBundle, name: "purple")
    /// Color `turquoise`.
    static let turquoise = Rswift.ColorResource(bundle: R.hostingBundle, name: "turquoise")
    /// Color `yellow`.
    static let yellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "yellow")
    
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "dark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dark, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "gray1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray1, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "gray2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray2, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.light, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "pink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pink, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "purple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.purple, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "turquoise", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func turquoise(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.turquoise, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `loaderGray.json`.
    static let loaderGrayJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loaderGray", pathExtension: "json")
    /// Resource file `loaderLight.json`.
    static let loaderLightJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loaderLight", pathExtension: "json")
    
    /// `bundle.url(forResource: "loaderGray", withExtension: "json")`
    static func loaderGrayJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loaderGrayJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "loaderLight", withExtension: "json")`
    static func loaderLightJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loaderLightJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Poppins-Medium`.
    static let poppinsMedium = Rswift.FontResource(fontName: "Poppins-Medium")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")
    /// Font `Poppins-SemiBold`.
    static let poppinsSemiBold = Rswift.FontResource(fontName: "Poppins-SemiBold")
    
    /// `UIFont(name: "Poppins-Medium", size: ...)`
    static func poppinsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMedium, size: size)
    }
    
    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }
    
    /// `UIFont(name: "Poppins-SemiBold", size: ...)`
    static func poppinsSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBold, size: size)
    }
    
    static func validate() throws {
      if R.font.poppinsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Medium' could not be loaded, is 'Poppins-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBold' could not be loaded, is 'Poppins-SemiBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 36 images.
  struct image {
    /// Image `accounts`.
    static let accounts = Rswift.ImageResource(bundle: R.hostingBundle, name: "accounts")
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `authCopyCreate`.
    static let authCopyCreate = Rswift.ImageResource(bundle: R.hostingBundle, name: "authCopyCreate")
    /// Image `autoblock_full`.
    static let autoblock_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "autoblock_full")
    /// Image `autoblock`.
    static let autoblock = Rswift.ImageResource(bundle: R.hostingBundle, name: "autoblock")
    /// Image `backIcon`.
    static let backIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "backIcon")
    /// Image `backupEthIcon`.
    static let backupEthIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "backupEthIcon")
    /// Image `backup_logo`.
    static let backup_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "backup_logo")
    /// Image `backup`.
    static let backup = Rswift.ImageResource(bundle: R.hostingBundle, name: "backup")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `cell_arrow`.
    static let cell_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "cell_arrow")
    /// Image `changeNetwork`.
    static let changeNetwork = Rswift.ImageResource(bundle: R.hostingBundle, name: "changeNetwork")
    /// Image `change_pin`.
    static let change_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "change_pin")
    /// Image `confirmationIcon`.
    static let confirmationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "confirmationIcon")
    /// Image `confirmedIcon`.
    static let confirmedIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "confirmedIcon")
    /// Image `copy`.
    static let copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "copy")
    /// Image `create_import`.
    static let create_import = Rswift.ImageResource(bundle: R.hostingBundle, name: "create_import")
    /// Image `drop_down`.
    static let drop_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "drop_down")
    /// Image `errorIcon`.
    static let errorIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "errorIcon")
    /// Image `eth_icon`.
    static let eth_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "eth_icon")
    /// Image `faceIdIcon`.
    static let faceIdIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "faceIdIcon")
    /// Image `import_eth`.
    static let import_eth = Rswift.ImageResource(bundle: R.hostingBundle, name: "import_eth")
    /// Image `logout_screen`.
    static let logout_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout_screen")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `no_tx`.
    static let no_tx = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_tx")
    /// Image `qrcode`.
    static let qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode")
    /// Image `receive_title`.
    static let receive_title = Rswift.ImageResource(bundle: R.hostingBundle, name: "receive_title")
    /// Image `receive`.
    static let receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "receive")
    /// Image `selected_currency`.
    static let selected_currency = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected_currency")
    /// Image `selected_time`.
    static let selected_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected_time")
    /// Image `send_title`.
    static let send_title = Rswift.ImageResource(bundle: R.hostingBundle, name: "send_title")
    /// Image `send`.
    static let send = Rswift.ImageResource(bundle: R.hostingBundle, name: "send")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `touchIdIcon`.
    static let touchIdIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "touchIdIcon")
    /// Image `trash_icon`.
    static let trash_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash_icon")
    /// Image `triangle`.
    static let triangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle")
    
    /// `UIImage(named: "accounts", bundle: ..., traitCollection: ...)`
    static func accounts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accounts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "authCopyCreate", bundle: ..., traitCollection: ...)`
    static func authCopyCreate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authCopyCreate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "autoblock", bundle: ..., traitCollection: ...)`
    static func autoblock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.autoblock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "autoblock_full", bundle: ..., traitCollection: ...)`
    static func autoblock_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.autoblock_full, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backIcon", bundle: ..., traitCollection: ...)`
    static func backIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backup", bundle: ..., traitCollection: ...)`
    static func backup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backupEthIcon", bundle: ..., traitCollection: ...)`
    static func backupEthIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backupEthIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backup_logo", bundle: ..., traitCollection: ...)`
    static func backup_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backup_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cell_arrow", bundle: ..., traitCollection: ...)`
    static func cell_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cell_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "changeNetwork", bundle: ..., traitCollection: ...)`
    static func changeNetwork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changeNetwork, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "change_pin", bundle: ..., traitCollection: ...)`
    static func change_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.change_pin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "confirmationIcon", bundle: ..., traitCollection: ...)`
    static func confirmationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confirmationIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "confirmedIcon", bundle: ..., traitCollection: ...)`
    static func confirmedIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confirmedIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "copy", bundle: ..., traitCollection: ...)`
    static func copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "create_import", bundle: ..., traitCollection: ...)`
    static func create_import(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.create_import, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "drop_down", bundle: ..., traitCollection: ...)`
    static func drop_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drop_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "errorIcon", bundle: ..., traitCollection: ...)`
    static func errorIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.errorIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eth_icon", bundle: ..., traitCollection: ...)`
    static func eth_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eth_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "faceIdIcon", bundle: ..., traitCollection: ...)`
    static func faceIdIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faceIdIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "import_eth", bundle: ..., traitCollection: ...)`
    static func import_eth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.import_eth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logout_screen", bundle: ..., traitCollection: ...)`
    static func logout_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "no_tx", bundle: ..., traitCollection: ...)`
    static func no_tx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_tx, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode", bundle: ..., traitCollection: ...)`
    static func qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "receive", bundle: ..., traitCollection: ...)`
    static func receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "receive_title", bundle: ..., traitCollection: ...)`
    static func receive_title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.receive_title, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selected_currency", bundle: ..., traitCollection: ...)`
    static func selected_currency(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected_currency, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selected_time", bundle: ..., traitCollection: ...)`
    static func selected_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected_time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "send", bundle: ..., traitCollection: ...)`
    static func send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "send_title", bundle: ..., traitCollection: ...)`
    static func send_title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send_title, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "touchIdIcon", bundle: ..., traitCollection: ...)`
    static func touchIdIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touchIdIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trash_icon", bundle: ..., traitCollection: ...)`
    static func trash_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "triangle", bundle: ..., traitCollection: ...)`
    static func triangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangle, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `LoaderFooterCell`.
    static let loaderFooterCell = _R.nib._LoaderFooterCell()
    /// Nib `SelectCurrencySnackBarTableViewCell`.
    static let selectCurrencySnackBarTableViewCell = _R.nib._SelectCurrencySnackBarTableViewCell()
    
    /// `UINib(name: "LoaderFooterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loaderFooterCell) instead")
    static func loaderFooterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loaderFooterCell)
    }
    
    /// `UINib(name: "SelectCurrencySnackBarTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectCurrencySnackBarTableViewCell) instead")
    static func selectCurrencySnackBarTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectCurrencySnackBarTableViewCell)
    }
    
    static func loaderFooterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoaderFooterCell? {
      return R.nib.loaderFooterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoaderFooterCell
    }
    
    static func selectCurrencySnackBarTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectCurrencySnackBarTableViewCell? {
      return R.nib.selectCurrencySnackBarTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectCurrencySnackBarTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 7 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AutoblockTableViewCell`.
    static let autoblockTableViewCell: Rswift.ReuseIdentifier<AutoblockTableViewCell> = Rswift.ReuseIdentifier(identifier: "AutoblockTableViewCell")
    /// Reuse identifier `ChangeNetworkHeaderCellIdentifier`.
    static let changeNetworkHeaderCellIdentifier: Rswift.ReuseIdentifier<ChangeNetworkHeaderCell> = Rswift.ReuseIdentifier(identifier: "ChangeNetworkHeaderCellIdentifier")
    /// Reuse identifier `ChangeNetworkTableViewCell`.
    static let changeNetworkTableViewCell: Rswift.ReuseIdentifier<ChangeNetworkTableViewCell> = Rswift.ReuseIdentifier(identifier: "ChangeNetworkTableViewCell")
    /// Reuse identifier `EthAccountsCellIdentifier`.
    static let ethAccountsCellIdentifier: Rswift.ReuseIdentifier<ETHModule.EthAccountsCell> = Rswift.ReuseIdentifier(identifier: "EthAccountsCellIdentifier")
    /// Reuse identifier `HostoryItemCellReuseIdentifire`.
    static let hostoryItemCellReuseIdentifire: Rswift.ReuseIdentifier<HostoryItemCell> = Rswift.ReuseIdentifier(identifier: "HostoryItemCellReuseIdentifire")
    /// Reuse identifier `LoaderFooterCell`.
    static let loaderFooterCell: Rswift.ReuseIdentifier<LoaderFooterCell> = Rswift.ReuseIdentifier(identifier: "LoaderFooterCell")
    /// Reuse identifier `UniversalHistoryCellIdentifire`.
    static let universalHistoryCellIdentifire: Rswift.ReuseIdentifier<UniversalHistoryCell> = Rswift.ReuseIdentifier(identifier: "UniversalHistoryCellIdentifire")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `AuthValid`.
    static let authValid = _R.storyboard.authValid()
    /// Storyboard `HistoryDetails`.
    static let historyDetails = _R.storyboard.historyDetails()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Scan`.
    static let scan = _R.storyboard.scan()
    /// Storyboard `Send`.
    static let send = _R.storyboard.send()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `SnackBar`.
    static let snackBar = _R.storyboard.snackBar()
    
    /// `UIStoryboard(name: "AuthValid", bundle: ...)`
    static func authValid(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authValid)
    }
    
    /// `UIStoryboard(name: "HistoryDetails", bundle: ...)`
    static func historyDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.historyDetails)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Scan", bundle: ...)`
    static func scan(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.scan)
    }
    
    /// `UIStoryboard(name: "Send", bundle: ...)`
    static func send(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.send)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "SnackBar", bundle: ...)`
    static func snackBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.snackBar)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localization` struct is generated, and contains static references to 124 localization keys.
    struct localization {
      /// Value: %@ minute
      static let blockTimeMinute = Rswift.StringResource(key: "blockTime.minute", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ minutes
      static let blockTimeMinutes = Rswift.StringResource(key: "blockTime.minutes", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ seconds
      static let blockTimeSeconds = Rswift.StringResource(key: "blockTime.seconds", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 0
      static let sendFlowAmountCurrencyTextFieldPlaceholder = Rswift.StringResource(key: "send.flow.amount.currency.text.field.placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 0.0
      static let sendFlowAmountTextFieldPlaceholder = Rswift.StringResource(key: "send.flow.amount.text.field.placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 0.000021
      static let sendFlowFeeTextFieldPlaceholder = Rswift.StringResource(key: "send.flow.fee.text.field.placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Accounts
      static let settingsFlowAccountsTitle = Rswift.StringResource(key: "settings.flow.accounts.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Amount
      static let sendFlowAmountTextFieldTitle = Rswift.StringResource(key: "send.flow.amount.text.field.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Amount
      static let sendFlowAmountTextFieldTitleWithoutCurrency = Rswift.StringResource(key: "send.flow.amount.text.field.title.without.currency", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Amount, USD
      static let sendFlowAmountCurrencyTextField = Rswift.StringResource(key: "send.flow.amount.currency.text.field", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure to delete address?
      static let accountsScreenDeleteSnackbarTitle = Rswift.StringResource(key: "accounts.screen.delete.snackbar.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure to switch address?
      static let accountsScreenSwitchSnackbarTitle = Rswift.StringResource(key: "accounts.screen.switch.snackbar.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Autoblock
      static let settingsFlowAutoblock = Rswift.StringResource(key: "settings.flow.autoblock", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Backup
      static let settingsFlowBackup = Rswift.StringResource(key: "settings.flow.backup", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Brainkey already exist
      static let authFlowImportAlreadyExistError = Rswift.StringResource(key: "auth.flow.import.already.exist.error", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Can not estimate fee
      static let sendFlowErrorCantLoadFee = Rswift.StringResource(key: "send.flow.error.cant.load.fee", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Can't create wallet
      static let createAccountErrorTitle = Rswift.StringResource(key: "create.account.error.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Can't delete account
      static let accountsScreenDeleteErrorMessage = Rswift.StringResource(key: "accounts.screen.delete.error.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Can't import wallet
      static let importErrorTitle = Rswift.StringResource(key: "import.error.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Can't select account
      static let accountsScreenSwitchErrorMessage = Rswift.StringResource(key: "accounts.screen.switch.error.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let accountsScreenDeleteSnackbarLeftButton = Rswift.StringResource(key: "accounts.screen.delete.snackbar.left.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let accountsScreenSwitchSnackbarLeftButton = Rswift.StringResource(key: "accounts.screen.switch.snackbar.left.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let errorCancelButtonTitle = Rswift.StringResource(key: "error.cancel.button.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let settingsFlowLogoutScreenCancelButton = Rswift.StringResource(key: "settings.flow.logout.screen.cancel.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let settingsFlowNotificationsPermissionCancel = Rswift.StringResource(key: "settings.flow.notifications.permission.cancel", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change Network
      static let settingsFlowChangeNetwork = Rswift.StringResource(key: "settings.flow.changeNetwork", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change PIN
      static let settingsFlowChangePin = Rswift.StringResource(key: "settings.flow.change.pin", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Choose currency
      static let sendFlowCurrencyPopupTitle = Rswift.StringResource(key: "send.flow.currency.popup.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirmed
      static let historyDetailsConfirmed = Rswift.StringResource(key: "history.details.confirmed", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Continue
      static let authCopyContinueButtonTitle = Rswift.StringResource(key: "auth.copy.continue.button.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Copied
      static let authCopyCopyMessage = Rswift.StringResource(key: "auth.copy.copy.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Copy
      static let exportWifScreenCopyButtonTitle = Rswift.StringResource(key: "exportWif.screen.copy.button.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Copy Brainkey
      static let authCopyCopyButtonTitle = Rswift.StringResource(key: "auth.copy.copy.button.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create New Address
      static let authFlowSelectionCreateNew = Rswift.StringResource(key: "auth.flow.selection.create.new", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create new one or import your Brainkey
      static let authFlowSelectionSubtitle = Rswift.StringResource(key: "auth.flow.selection.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create the first one!
      static let mainFlowHistoryNoTxSubtitle = Rswift.StringResource(key: "main.flow.history.no.tx.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Do not lose it! It cannot be recovered if you lose it
      static let authCopySubtitle = Rswift.StringResource(key: "auth.copy.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Don't block
      static let blockTimeNoBlock = Rswift.StringResource(key: "blockTime.no.block", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ETH Networks
      static let networkGroupTitle = Rswift.StringResource(key: "network.group.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ETH Transaction History
      static let mainFlowHistoryTitleEth = Rswift.StringResource(key: "main.flow.history.title.eth", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter address to complete
      static let sendFlowErrorNoTo = Rswift.StringResource(key: "send.flow.error.no.to", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your Brainkey
      static let authFlowImportPlaceholder = Rswift.StringResource(key: "auth.flow.import.placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error handled
      static let accountsScreenSwitchOrDeleteErrorTitle = Rswift.StringResource(key: "accounts.screen.switch.or.delete.error.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error while saving Brainkey
      static let authFlowImportSaveWalletError = Rswift.StringResource(key: "auth.flow.import.save.wallet.error", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ethereum Addresses
      static let accountsScreenSubtitle = Rswift.StringResource(key: "accounts.screen.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ethereum address
      static let sendFlowAddressTextFieldPlaceholder = Rswift.StringResource(key: "send.flow.address.text.field.placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Face ID
      static let settingsFlowFaceId = Rswift.StringResource(key: "settings.flow.face.id", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Failed to save sensitive data
      static let saveSensitiveDataError = Rswift.StringResource(key: "save.sensitive.data.error", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fee
      static let historyDetailsFee = Rswift.StringResource(key: "history.details.fee", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fee
      static let sendFlowFeeTextFieldTitle = Rswift.StringResource(key: "send.flow.fee.text.field.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: From
      static let historyDetailsFrom = Rswift.StringResource(key: "history.details.from", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Import Brainkey
      static let authFlowImportImport = Rswift.StringResource(key: "auth.flow.import.import", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Import Brainkey
      static let authFlowSelectionImport = Rswift.StringResource(key: "auth.flow.selection.import", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Import your Brainkey to start working with your funds
      static let authFlowImportSubtitle = Rswift.StringResource(key: "auth.flow.import.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Import your Ethereum Brainkey
      static let authFlowImportTitle = Rswift.StringResource(key: "auth.flow.import.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Importing...
      static let authFlowImportLoading = Rswift.StringResource(key: "auth.flow.import.loading", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Incorrect Brainkey
      static let authFlowImportError = Rswift.StringResource(key: "auth.flow.import.error", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Insufficient balance
      static let sendFlowErrorAmountError = Rswift.StringResource(key: "send.flow.error.amount.error", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid address
      static let sendFlowErrorToAccountNotFound = Rswift.StringResource(key: "send.flow.error.to.account.not.found", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid address
      static let sendFlowErrorToAddressNotFound = Rswift.StringResource(key: "send.flow.error.to.address.not.found", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Logout
      static let settingsFlowLogout = Rswift.StringResource(key: "settings.flow.logout", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Networks
      static let settingsFlowNetworks = Rswift.StringResource(key: "settings.flow.networks", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notifications disabled
      static let settingsFlowNotificationsPermissionTitle = Rswift.StringResource(key: "settings.flow.notifications.permission.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let settingsFlowNotificationsInternetButton = Rswift.StringResource(key: "settings.flow.notifications.internet.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok
      static let errorOkButtonTitle = Rswift.StringResource(key: "error.ok.button.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open
      static let settingsFlowNotificationsPermissionOpen = Rswift.StringResource(key: "settings.flow.notifications.permission.open", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open in explorer
      static let historyDetailsExplorerButton = Rswift.StringResource(key: "history.details.explorer.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open settings to enable notifications
      static let settingsFlowNotificationsPermissionMessage = Rswift.StringResource(key: "settings.flow.notifications.permission.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Permission for using camera is denied
      static let qrcodeScreenCameraDeniedTitle = Rswift.StringResource(key: "qrcode.screen.camera.denied.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please choose autoblock period
      static let settingsFlowAutoblockScreenInfoTitle = Rswift.StringResource(key: "settings.flow.autoblock.screen.info.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please choose network
      static let settingsFlowChangeNetworkScreenInfoTitle = Rswift.StringResource(key: "settings.flow.changeNetwork.screen.info.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please confirm if you want to remove Ethereum address from your wallet.
      static let settingsFlowLogoutScreenInfoSubtitle = Rswift.StringResource(key: "settings.flow.logout.screen.info.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please save your Brainkey
      static let authCopyTitle = Rswift.StringResource(key: "auth.copy.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please, enable internet connection
      static let settingsFlowNotificationsInternetTitle = Rswift.StringResource(key: "settings.flow.notifications.internet.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please, go to application settings for allowing camera permission
      static let qrcodeScreenCameraDeniedMessage = Rswift.StringResource(key: "qrcode.screen.camera.denied.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Push Notifications
      static let settingsFlowNotifications = Rswift.StringResource(key: "settings.flow.notifications", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Received
      static let historyListScreenReceived = Rswift.StringResource(key: "history.list.screen.received", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove from wallet
      static let settingsFlowLogoutScreenConfirmButton = Rswift.StringResource(key: "settings.flow.logout.screen.confirm.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Request
      static let mainFlowReceiveButton = Rswift.StringResource(key: "main.flow.receive.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Request
      static let receiveFlowTitle = Rswift.StringResource(key: "receive.flow.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save your Brainkey to backup your wallet
      static let exportWifSaveBrainkeyTitle = Rswift.StringResource(key: "exportWif.save.brainkey.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Scan QR-Code
      static let qrcodeScreenTitle = Rswift.StringResource(key: "qrcode.screen.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Scaning error
      static let qrcodeScanErrorTitle = Rswift.StringResource(key: "qrcode.scan.error.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select currency and fee to complete
      static let sendFlowErrorNoCurrencyAndFee = Rswift.StringResource(key: "send.flow.error.no.currency.and.fee", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send
      static let mainFlowSendButton = Rswift.StringResource(key: "main.flow.send.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send
      static let sendFlowSendButtonText = Rswift.StringResource(key: "send.flow.send.button.text", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send
      static let sendFlowTitle = Rswift.StringResource(key: "send.flow.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send All
      static let sendFlowSendAllButtonText = Rswift.StringResource(key: "send.flow.send.all.button.text", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send To
      static let sendFlowAddressTextFieldTitle = Rswift.StringResource(key: "send.flow.address.text.field.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sending...
      static let sendFlowSendButtonLoadingText = Rswift.StringResource(key: "send.flow.send.button.loading.text", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sent
      static let historyListScreenSend = Rswift.StringResource(key: "history.list.screen.send", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let qrcodeScreenCameraDeniedGoToSettingsButton = Rswift.StringResource(key: "qrcode.screen.camera.denied.go.to.settings.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settingsFlowTitle = Rswift.StringResource(key: "settings.flow.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Something went wrong. Please try again
      static let somethingWrongMessage = Rswift.StringResource(key: "something.wrong.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Successfully sent
      static let sendFlowSuccessTransactionSend = Rswift.StringResource(key: "send.flow.success.transaction.send", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Switch
      static let accountsScreenSwitchSnackbarRightButton = Rswift.StringResource(key: "accounts.screen.switch.snackbar.right.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This process cannot be undone.
      static let accountsScreenDeleteSnackbarMessage = Rswift.StringResource(key: "accounts.screen.delete.snackbar.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This process cannot be undone.
      static let accountsScreenSwitchSnackbarMessage = Rswift.StringResource(key: "accounts.screen.switch.snackbar.message", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To
      static let historyDetailsTo = Rswift.StringResource(key: "history.details.to", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Token Transaction History
      static let mainFlowHistoryTitleToken = Rswift.StringResource(key: "main.flow.history.title.token", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Token not found
      static let sendFlowErrorTokenNotFound = Rswift.StringResource(key: "send.flow.error.token.not.found", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Total Balance
      static let mainFlowWalletTitle = Rswift.StringResource(key: "main.flow.wallet.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Touch ID
      static let settingsFlowTouchId = Rswift.StringResource(key: "settings.flow.touch.id", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transaction History
      static let mainFlowHistoryTitle = Rswift.StringResource(key: "main.flow.history.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transaction history is loading
      static let mainFlowHistoryLoadingTitle = Rswift.StringResource(key: "main.flow.history.loading.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transaction was not sent
      static let sendFlowErrorTransactionSend = Rswift.StringResource(key: "send.flow.error.transaction.send", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Transfer
      static let historyDetailsTitle = Rswift.StringResource(key: "history.details.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Try again
      static let errorTryAgainButtonTitle = Rswift.StringResource(key: "error.try.again.button.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: USD
      static let sendFlowAmountCurrencyTextFieldAdditional = Rswift.StringResource(key: "send.flow.amount.currency.text.field.additional", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Waiting for confirmation...
      static let historyDetailsConfirmation = Rswift.StringResource(key: "history.details.confirmation", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We strongly recommend
      static let settingsFlowLogoutScreenInfoTitle1 = Rswift.StringResource(key: "settings.flow.logout.screen.info.title.1", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We strongly recommend to backup your Brainkey.
      static let settingsFlowLogoutScreenInfoTitle = Rswift.StringResource(key: "settings.flow.logout.screen.info.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Wrong amount
      static let sendFlowErrorNoAmount = Rswift.StringResource(key: "send.flow.error.no.amount", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes, delete
      static let accountsScreenDeleteSnackbarRightButton = Rswift.StringResource(key: "accounts.screen.delete.snackbar.right.button", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You are about to exit your wallet?
      static let accountsScreenDeleteLastSnackbarTitle = Rswift.StringResource(key: "accounts.screen.delete.last.snackbar.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You don't have Ethereum address yet
      static let authFlowSelectionTitle = Rswift.StringResource(key: "auth.flow.selection.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You don't have any transactions
      static let mainFlowHistoryNoTxTitle = Rswift.StringResource(key: "main.flow.history.no.tx.title", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have no address
      static let sendFlowErrorNoFrom = Rswift.StringResource(key: "send.flow.error.no.from", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: kovan
      static let settingsChangeNetworkKovan = Rswift.StringResource(key: "settings.changeNetwork.kovan", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mainnet
      static let settingsChangeNetworkMainnet = Rswift.StringResource(key: "settings.changeNetwork.mainnet", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: rinkeby (testnet)
      static let settingsChangeNetworkRinkeby = Rswift.StringResource(key: "settings.changeNetwork.rinkeby", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ropsten
      static let settingsChangeNetworkRopsten = Rswift.StringResource(key: "settings.changeNetwork.ropsten", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: to backup
      static let settingsFlowLogoutScreenInfoTitle2 = Rswift.StringResource(key: "settings.flow.logout.screen.info.title.2", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: your Brainkey.
      static let settingsFlowLogoutScreenInfoTitle3 = Rswift.StringResource(key: "settings.flow.logout.screen.info.title.3", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: %@ minute
      static func blockTimeMinute(_ value1: String) -> String {
        return String(format: NSLocalizedString("blockTime.minute", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ minutes
      static func blockTimeMinutes(_ value1: String) -> String {
        return String(format: NSLocalizedString("blockTime.minutes", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ seconds
      static func blockTimeSeconds(_ value1: String) -> String {
        return String(format: NSLocalizedString("blockTime.seconds", tableName: "Localization", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 0
      static func sendFlowAmountCurrencyTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.amount.currency.text.field.placeholder", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 0.0
      static func sendFlowAmountTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.amount.text.field.placeholder", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 0.000021
      static func sendFlowFeeTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.fee.text.field.placeholder", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Accounts
      static func settingsFlowAccountsTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.accounts.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Amount
      static func sendFlowAmountTextFieldTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.amount.text.field.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Amount
      static func sendFlowAmountTextFieldTitleWithoutCurrency(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.amount.text.field.title.without.currency", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Amount, USD
      static func sendFlowAmountCurrencyTextField(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.amount.currency.text.field", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure to delete address?
      static func accountsScreenDeleteSnackbarTitle(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.delete.snackbar.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure to switch address?
      static func accountsScreenSwitchSnackbarTitle(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.snackbar.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Autoblock
      static func settingsFlowAutoblock(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.autoblock", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Backup
      static func settingsFlowBackup(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.backup", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Brainkey already exist
      static func authFlowImportAlreadyExistError(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.import.already.exist.error", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Can not estimate fee
      static func sendFlowErrorCantLoadFee(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.error.cant.load.fee", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Can't create wallet
      static func createAccountErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.account.error.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Can't delete account
      static func accountsScreenDeleteErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.delete.error.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Can't import wallet
      static func importErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("import.error.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Can't select account
      static func accountsScreenSwitchErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.error.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func accountsScreenDeleteSnackbarLeftButton(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.delete.snackbar.left.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func accountsScreenSwitchSnackbarLeftButton(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.snackbar.left.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func errorCancelButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("error.cancel.button.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func settingsFlowLogoutScreenCancelButton(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.cancel.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func settingsFlowNotificationsPermissionCancel(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.permission.cancel", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Change Network
      static func settingsFlowChangeNetwork(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.changeNetwork", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Change PIN
      static func settingsFlowChangePin(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.change.pin", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Choose currency
      static func sendFlowCurrencyPopupTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.currency.popup.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Confirmed
      static func historyDetailsConfirmed(_: Void = ()) -> String {
        return NSLocalizedString("history.details.confirmed", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Continue
      static func authCopyContinueButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("auth.copy.continue.button.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Copied
      static func authCopyCopyMessage(_: Void = ()) -> String {
        return NSLocalizedString("auth.copy.copy.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Copy
      static func exportWifScreenCopyButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("exportWif.screen.copy.button.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Copy Brainkey
      static func authCopyCopyButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("auth.copy.copy.button.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Create New Address
      static func authFlowSelectionCreateNew(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.selection.create.new", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Create new one or import your Brainkey
      static func authFlowSelectionSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.selection.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Create the first one!
      static func mainFlowHistoryNoTxSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("main.flow.history.no.tx.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Do not lose it! It cannot be recovered if you lose it
      static func authCopySubtitle(_: Void = ()) -> String {
        return NSLocalizedString("auth.copy.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Don't block
      static func blockTimeNoBlock(_: Void = ()) -> String {
        return NSLocalizedString("blockTime.no.block", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ETH Networks
      static func networkGroupTitle(_: Void = ()) -> String {
        return NSLocalizedString("network.group.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ETH Transaction History
      static func mainFlowHistoryTitleEth(_: Void = ()) -> String {
        return NSLocalizedString("main.flow.history.title.eth", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter address to complete
      static func sendFlowErrorNoTo(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.error.no.to", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter your Brainkey
      static func authFlowImportPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.import.placeholder", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Error handled
      static func accountsScreenSwitchOrDeleteErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.or.delete.error.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Error while saving Brainkey
      static func authFlowImportSaveWalletError(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.import.save.wallet.error", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ethereum Addresses
      static func accountsScreenSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ethereum address
      static func sendFlowAddressTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.address.text.field.placeholder", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Face ID
      static func settingsFlowFaceId(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.face.id", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Failed to save sensitive data
      static func saveSensitiveDataError(_: Void = ()) -> String {
        return NSLocalizedString("save.sensitive.data.error", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Fee
      static func historyDetailsFee(_: Void = ()) -> String {
        return NSLocalizedString("history.details.fee", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Fee
      static func sendFlowFeeTextFieldTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.fee.text.field.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: From
      static func historyDetailsFrom(_: Void = ()) -> String {
        return NSLocalizedString("history.details.from", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Import Brainkey
      static func authFlowImportImport(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.import.import", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Import Brainkey
      static func authFlowSelectionImport(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.selection.import", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Import your Brainkey to start working with your funds
      static func authFlowImportSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.import.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Import your Ethereum Brainkey
      static func authFlowImportTitle(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.import.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Importing...
      static func authFlowImportLoading(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.import.loading", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Incorrect Brainkey
      static func authFlowImportError(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.import.error", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Insufficient balance
      static func sendFlowErrorAmountError(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.error.amount.error", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Invalid address
      static func sendFlowErrorToAccountNotFound(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.error.to.account.not.found", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Invalid address
      static func sendFlowErrorToAddressNotFound(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.error.to.address.not.found", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Logout
      static func settingsFlowLogout(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Networks
      static func settingsFlowNetworks(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.networks", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Notifications disabled
      static func settingsFlowNotificationsPermissionTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.permission.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func settingsFlowNotificationsInternetButton(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.internet.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ok
      static func errorOkButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("error.ok.button.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Open
      static func settingsFlowNotificationsPermissionOpen(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.permission.open", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Open in explorer
      static func historyDetailsExplorerButton(_: Void = ()) -> String {
        return NSLocalizedString("history.details.explorer.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Open settings to enable notifications
      static func settingsFlowNotificationsPermissionMessage(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.permission.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Permission for using camera is denied
      static func qrcodeScreenCameraDeniedTitle(_: Void = ()) -> String {
        return NSLocalizedString("qrcode.screen.camera.denied.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please choose autoblock period
      static func settingsFlowAutoblockScreenInfoTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.autoblock.screen.info.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please choose network
      static func settingsFlowChangeNetworkScreenInfoTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.changeNetwork.screen.info.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please confirm if you want to remove Ethereum address from your wallet.
      static func settingsFlowLogoutScreenInfoSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.info.subtitle", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please save your Brainkey
      static func authCopyTitle(_: Void = ()) -> String {
        return NSLocalizedString("auth.copy.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please, enable internet connection
      static func settingsFlowNotificationsInternetTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications.internet.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please, go to application settings for allowing camera permission
      static func qrcodeScreenCameraDeniedMessage(_: Void = ()) -> String {
        return NSLocalizedString("qrcode.screen.camera.denied.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Push Notifications
      static func settingsFlowNotifications(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.notifications", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Received
      static func historyListScreenReceived(_: Void = ()) -> String {
        return NSLocalizedString("history.list.screen.received", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Remove from wallet
      static func settingsFlowLogoutScreenConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.confirm.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Request
      static func mainFlowReceiveButton(_: Void = ()) -> String {
        return NSLocalizedString("main.flow.receive.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Request
      static func receiveFlowTitle(_: Void = ()) -> String {
        return NSLocalizedString("receive.flow.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Save your Brainkey to backup your wallet
      static func exportWifSaveBrainkeyTitle(_: Void = ()) -> String {
        return NSLocalizedString("exportWif.save.brainkey.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Scan QR-Code
      static func qrcodeScreenTitle(_: Void = ()) -> String {
        return NSLocalizedString("qrcode.screen.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Scaning error
      static func qrcodeScanErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("qrcode.scan.error.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Select currency and fee to complete
      static func sendFlowErrorNoCurrencyAndFee(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.error.no.currency.and.fee", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Send
      static func mainFlowSendButton(_: Void = ()) -> String {
        return NSLocalizedString("main.flow.send.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Send
      static func sendFlowSendButtonText(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.send.button.text", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Send
      static func sendFlowTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Send All
      static func sendFlowSendAllButtonText(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.send.all.button.text", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Send To
      static func sendFlowAddressTextFieldTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.address.text.field.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sending...
      static func sendFlowSendButtonLoadingText(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.send.button.loading.text", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sent
      static func historyListScreenSend(_: Void = ()) -> String {
        return NSLocalizedString("history.list.screen.send", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Settings
      static func qrcodeScreenCameraDeniedGoToSettingsButton(_: Void = ()) -> String {
        return NSLocalizedString("qrcode.screen.camera.denied.go.to.settings.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Settings
      static func settingsFlowTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Something went wrong. Please try again
      static func somethingWrongMessage(_: Void = ()) -> String {
        return NSLocalizedString("something.wrong.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Successfully sent
      static func sendFlowSuccessTransactionSend(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.success.transaction.send", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Switch
      static func accountsScreenSwitchSnackbarRightButton(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.snackbar.right.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This process cannot be undone.
      static func accountsScreenDeleteSnackbarMessage(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.delete.snackbar.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This process cannot be undone.
      static func accountsScreenSwitchSnackbarMessage(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.switch.snackbar.message", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: To
      static func historyDetailsTo(_: Void = ()) -> String {
        return NSLocalizedString("history.details.to", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Token Transaction History
      static func mainFlowHistoryTitleToken(_: Void = ()) -> String {
        return NSLocalizedString("main.flow.history.title.token", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Token not found
      static func sendFlowErrorTokenNotFound(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.error.token.not.found", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Total Balance
      static func mainFlowWalletTitle(_: Void = ()) -> String {
        return NSLocalizedString("main.flow.wallet.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Touch ID
      static func settingsFlowTouchId(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.touch.id", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Transaction History
      static func mainFlowHistoryTitle(_: Void = ()) -> String {
        return NSLocalizedString("main.flow.history.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Transaction history is loading
      static func mainFlowHistoryLoadingTitle(_: Void = ()) -> String {
        return NSLocalizedString("main.flow.history.loading.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Transaction was not sent
      static func sendFlowErrorTransactionSend(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.error.transaction.send", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Transfer
      static func historyDetailsTitle(_: Void = ()) -> String {
        return NSLocalizedString("history.details.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Try again
      static func errorTryAgainButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("error.try.again.button.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: USD
      static func sendFlowAmountCurrencyTextFieldAdditional(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.amount.currency.text.field.additional", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Waiting for confirmation...
      static func historyDetailsConfirmation(_: Void = ()) -> String {
        return NSLocalizedString("history.details.confirmation", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: We strongly recommend
      static func settingsFlowLogoutScreenInfoTitle1(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.info.title.1", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: We strongly recommend to backup your Brainkey.
      static func settingsFlowLogoutScreenInfoTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.info.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Wrong amount
      static func sendFlowErrorNoAmount(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.error.no.amount", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Yes, delete
      static func accountsScreenDeleteSnackbarRightButton(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.delete.snackbar.right.button", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You are about to exit your wallet?
      static func accountsScreenDeleteLastSnackbarTitle(_: Void = ()) -> String {
        return NSLocalizedString("accounts.screen.delete.last.snackbar.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You don't have Ethereum address yet
      static func authFlowSelectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("auth.flow.selection.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You don't have any transactions
      static func mainFlowHistoryNoTxTitle(_: Void = ()) -> String {
        return NSLocalizedString("main.flow.history.no.tx.title", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have no address
      static func sendFlowErrorNoFrom(_: Void = ()) -> String {
        return NSLocalizedString("send.flow.error.no.from", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: kovan
      static func settingsChangeNetworkKovan(_: Void = ()) -> String {
        return NSLocalizedString("settings.changeNetwork.kovan", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: mainnet
      static func settingsChangeNetworkMainnet(_: Void = ()) -> String {
        return NSLocalizedString("settings.changeNetwork.mainnet", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: rinkeby (testnet)
      static func settingsChangeNetworkRinkeby(_: Void = ()) -> String {
        return NSLocalizedString("settings.changeNetwork.rinkeby", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ropsten
      static func settingsChangeNetworkRopsten(_: Void = ()) -> String {
        return NSLocalizedString("settings.changeNetwork.ropsten", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: to backup
      static func settingsFlowLogoutScreenInfoTitle2(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.info.title.2", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: your Brainkey.
      static func settingsFlowLogoutScreenInfoTitle3(_: Void = ()) -> String {
        return NSLocalizedString("settings.flow.logout.screen.info.title.3", tableName: "Localization", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SelectCurrencySnackBarTableViewCell.validate()
    }
    
    struct _LoaderFooterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LoaderFooterCell
      
      let bundle = R.hostingBundle
      let identifier = "LoaderFooterCell"
      let name = "LoaderFooterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoaderFooterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoaderFooterCell
      }
      
      fileprivate init() {}
    }
    
    struct _SelectCurrencySnackBarTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectCurrencySnackBarTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectCurrencySnackBarTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectCurrencySnackBarTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "selected_currency", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selected_currency' is used in nib 'SelectCurrencySnackBarTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try authValid.validate()
      try historyDetails.validate()
      try launchScreen.validate()
      try main.validate()
      try scan.validate()
      try send.validate()
      try settings.validate()
      try snackBar.validate()
    }
    
    struct authValid: Rswift.StoryboardResourceType, Rswift.Validatable {
      let authCreateAndCopyViewController = StoryboardViewControllerResource<AuthCreateAndCopyViewController>(identifier: "AuthCreateAndCopyViewController")
      let authFlowSelectionViewController = StoryboardViewControllerResource<AuthFlowSelectionViewController>(identifier: "AuthFlowSelectionViewController")
      let authImportBrainkeyViewController = StoryboardViewControllerResource<AuthImportBrainkeyViewController>(identifier: "AuthImportBrainkeyViewController")
      let authRootViewController = StoryboardViewControllerResource<AuthRootViewController>(identifier: "AuthRootViewController")
      let bundle = R.hostingBundle
      let name = "AuthValid"
      
      func authCreateAndCopyViewController(_: Void = ()) -> AuthCreateAndCopyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authCreateAndCopyViewController)
      }
      
      func authFlowSelectionViewController(_: Void = ()) -> AuthFlowSelectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authFlowSelectionViewController)
      }
      
      func authImportBrainkeyViewController(_: Void = ()) -> AuthImportBrainkeyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authImportBrainkeyViewController)
      }
      
      func authRootViewController(_: Void = ()) -> AuthRootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authRootViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "authCopyCreate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'authCopyCreate' is used in storyboard 'AuthValid', but couldn't be loaded.") }
        if UIKit.UIImage(named: "create_import", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'create_import' is used in storyboard 'AuthValid', but couldn't be loaded.") }
        if UIKit.UIImage(named: "import_eth", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'import_eth' is used in storyboard 'AuthValid', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.authValid().authCreateAndCopyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authCreateAndCopyViewController' could not be loaded from storyboard 'AuthValid' as 'AuthCreateAndCopyViewController'.") }
        if _R.storyboard.authValid().authFlowSelectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authFlowSelectionViewController' could not be loaded from storyboard 'AuthValid' as 'AuthFlowSelectionViewController'.") }
        if _R.storyboard.authValid().authImportBrainkeyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authImportBrainkeyViewController' could not be loaded from storyboard 'AuthValid' as 'AuthImportBrainkeyViewController'.") }
        if _R.storyboard.authValid().authRootViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authRootViewController' could not be loaded from storyboard 'AuthValid' as 'AuthRootViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct historyDetails: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let historyDetailsViewController = StoryboardViewControllerResource<HistoryDetailsViewController>(identifier: "HistoryDetailsViewController")
      let name = "HistoryDetails"
      
      func historyDetailsViewController(_: Void = ()) -> HistoryDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyDetailsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "confirmedIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'confirmedIcon' is used in storyboard 'HistoryDetails', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.historyDetails().historyDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyDetailsViewController' could not be loaded from storyboard 'HistoryDetails' as 'HistoryDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let historyViewController = StoryboardViewControllerResource<HistoryViewController>(identifier: "HistoryViewController")
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      let receiveViewController = StoryboardViewControllerResource<ReceiveViewController>(identifier: "ReceiveViewController")
      let walletViewController = StoryboardViewControllerResource<WalletViewController>(identifier: "WalletViewController")
      let walletWithTokenViewController = StoryboardViewControllerResource<WalletWithTokenViewController>(identifier: "WalletWithTokenViewController")
      
      func historyViewController(_: Void = ()) -> HistoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyViewController)
      }
      
      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }
      
      func receiveViewController(_: Void = ()) -> ReceiveViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: receiveViewController)
      }
      
      func walletViewController(_: Void = ()) -> WalletViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletViewController)
      }
      
      func walletWithTokenViewController(_: Void = ()) -> WalletWithTokenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletWithTokenViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "cell_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cell_arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eth_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eth_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "no_tx", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'no_tx' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "receive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'receive' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "receive_title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'receive_title' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "gray2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray2' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().historyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyViewController' could not be loaded from storyboard 'Main' as 'HistoryViewController'.") }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
        if _R.storyboard.main().receiveViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'receiveViewController' could not be loaded from storyboard 'Main' as 'ReceiveViewController'.") }
        if _R.storyboard.main().walletViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletViewController' could not be loaded from storyboard 'Main' as 'WalletViewController'.") }
        if _R.storyboard.main().walletWithTokenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletWithTokenViewController' could not be loaded from storyboard 'Main' as 'WalletWithTokenViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct scan: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Scan"
      let scanViewController = StoryboardViewControllerResource<ScanViewController>(identifier: "ScanViewController")
      
      func scanViewController(_: Void = ()) -> ScanViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scanViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.scan().scanViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scanViewController' could not be loaded from storyboard 'Scan' as 'ScanViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct send: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Send"
      let sendViewController = StoryboardViewControllerResource<SendViewController>(identifier: "SendViewController")
      
      func sendViewController(_: Void = ()) -> SendViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "send_title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'send_title' is used in storyboard 'Send', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue' is used in storyboard 'Send', but couldn't be loaded.") }
        }
        if _R.storyboard.send().sendViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendViewController' could not be loaded from storyboard 'Send' as 'SendViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accountsViewController = StoryboardViewControllerResource<ETHModule.AccountsViewController>(identifier: "AccountsViewController")
      let autoblockViewController = StoryboardViewControllerResource<AutoblockViewController>(identifier: "AutoblockViewController")
      let bundle = R.hostingBundle
      let changeNetworkViewController = StoryboardViewControllerResource<ChangeNetworkViewController>(identifier: "ChangeNetworkViewController")
      let exportBrainkeyViewController = StoryboardViewControllerResource<ExportBrainkeyViewController>(identifier: "ExportBrainkeyViewController")
      let logoutViewController = StoryboardViewControllerResource<LogoutViewController>(identifier: "LogoutViewController")
      let name = "Settings"
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      
      func accountsViewController(_: Void = ()) -> ETHModule.AccountsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountsViewController)
      }
      
      func autoblockViewController(_: Void = ()) -> AutoblockViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: autoblockViewController)
      }
      
      func changeNetworkViewController(_: Void = ()) -> ChangeNetworkViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changeNetworkViewController)
      }
      
      func exportBrainkeyViewController(_: Void = ()) -> ExportBrainkeyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: exportBrainkeyViewController)
      }
      
      func logoutViewController(_: Void = ()) -> LogoutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: logoutViewController)
      }
      
      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "autoblock_full", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'autoblock_full' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backupEthIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backupEthIcon' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logout_screen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logout_screen' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "selected_time", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selected_time' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "trash_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'trash_icon' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray1' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray2' is used in storyboard 'Settings', but couldn't be loaded.") }
        }
        if _R.storyboard.settings().accountsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountsViewController' could not be loaded from storyboard 'Settings' as 'ETHModule.AccountsViewController'.") }
        if _R.storyboard.settings().autoblockViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'autoblockViewController' could not be loaded from storyboard 'Settings' as 'AutoblockViewController'.") }
        if _R.storyboard.settings().changeNetworkViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changeNetworkViewController' could not be loaded from storyboard 'Settings' as 'ChangeNetworkViewController'.") }
        if _R.storyboard.settings().exportBrainkeyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'exportBrainkeyViewController' could not be loaded from storyboard 'Settings' as 'ExportBrainkeyViewController'.") }
        if _R.storyboard.settings().logoutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'logoutViewController' could not be loaded from storyboard 'Settings' as 'LogoutViewController'.") }
        if _R.storyboard.settings().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct snackBar: Rswift.StoryboardResourceType, Rswift.Validatable {
      let applySnackBarViewController = StoryboardViewControllerResource<ApplySnackBarViewController>(identifier: "ApplySnackBarViewController")
      let bundle = R.hostingBundle
      let buttonSnackBarViewController = StoryboardViewControllerResource<ButtonSnackBarViewController>(identifier: "ButtonSnackBarViewController")
      let name = "SnackBar"
      let oneButtonSnackBarViewController = StoryboardViewControllerResource<OneButtonSnackBarViewController>(identifier: "OneButtonSnackBarViewController")
      let selectCurrencySnackBarViewController = StoryboardViewControllerResource<SelectCurrencySnackBarViewController>(identifier: "SelectCurrencySnackBarViewController")
      
      func applySnackBarViewController(_: Void = ()) -> ApplySnackBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: applySnackBarViewController)
      }
      
      func buttonSnackBarViewController(_: Void = ()) -> ButtonSnackBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: buttonSnackBarViewController)
      }
      
      func oneButtonSnackBarViewController(_: Void = ()) -> OneButtonSnackBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: oneButtonSnackBarViewController)
      }
      
      func selectCurrencySnackBarViewController(_: Void = ()) -> SelectCurrencySnackBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectCurrencySnackBarViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "errorIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'errorIcon' is used in storyboard 'SnackBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-ok", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-ok' is used in storyboard 'SnackBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_swipe", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_swipe' is used in storyboard 'SnackBar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "purple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'purple' is used in storyboard 'SnackBar', but couldn't be loaded.") }
        }
        if _R.storyboard.snackBar().applySnackBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'applySnackBarViewController' could not be loaded from storyboard 'SnackBar' as 'ApplySnackBarViewController'.") }
        if _R.storyboard.snackBar().buttonSnackBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'buttonSnackBarViewController' could not be loaded from storyboard 'SnackBar' as 'ButtonSnackBarViewController'.") }
        if _R.storyboard.snackBar().oneButtonSnackBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'oneButtonSnackBarViewController' could not be loaded from storyboard 'SnackBar' as 'OneButtonSnackBarViewController'.") }
        if _R.storyboard.snackBar().selectCurrencySnackBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectCurrencySnackBarViewController' could not be loaded from storyboard 'SnackBar' as 'SelectCurrencySnackBarViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
